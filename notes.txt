Agile development model phases:

1.requirements gathering
2.design the requirements
3.construction / iteration
4.testing / quality assurance
5.deployment
6.feedback



Agile testing methods:

1.scrum 
2.crystal 
3.dynamic software development method(DSDM)
4.feature driven development(FDD)
5.lean software development
6.extreme programming (XP)


Agile values (MANIFESTO):

1.indiviuals and ineractions over processes and tools 
2.working software over comprehensive documentation
3.customers are collaboration over contact negotiation
4.responding to change over following a plan.


12 principles behind the agile manifesto:

1.customer satisfaction
2.welcome change(modifications at the final stage)
3.deliver the working software(frequent intract with customers)
4.collaboration(daily report updates)
5.motivation(motivate the team members for involment)
6.face to face conversation(most effictive method of conveying information to and within a development team)
7.measure the progress as per the working software
8.maintain constant pace(having same wavelength among the teammates and users)
9.monitoring(
10.simplicity
11.self organised teams
12.reviem the work regularly

                                                                                       
characteristics of agile:
                                                                                                          
                                                                                                          itearation     
                                                         modular functioning                   |                     time-bound
                                                                                               \                                   /
                                                                                                    characteristics of 
                                                                parsimony     -------        agile :                   ------   adaptation
                                                                                                  /                         \
                                                                             incremental             |              people-oriented
 												     convergence

modular functioning:
  			
it is the key element of a good process
modularity breaks the components into activites
sdp is a set of activities that transforms or frames the vision of software system into reality

iteration:

1. it verifies the flow of a cycle without any error or in the right way
(eg: form the login to the homepage)
2. agile process focus on the small cycles
3. in this even a short cycle is repeated many times until getting the correct result


set of activity:

                       				login
						  |
						  |
				           withdrawalance
                                          /      |       \
                                       /         |          \
                                    /          print         \
            change in bank            |                updation of bank 
                                                  |
                                              other option


time bound :
1. software development comes with time limits
2. developing team will give the delivery time or date to the customer for tracking the status of the report
3. iteration plays the good role in time limit between 1-6 weeks

parismony:
1. agile development discuss about the software can be developbed with small changes for the new upgraded version

incremental:
1. agile development is not entirely builed at once it is partioned and implented at all the times

convergence:
1. it views the risks that are attacked actively and avoids the risks

people oriented:
1.the process is known for its priority of the customers over process and technology.
2. it implies that every customer can know how use it

advantages of agile model:

1. in agile methodology the delivery of software in uremitting 
2. the customers are stisfied because every sprint working feature of the software is delivered to them
3.customers can have a look of the working feature which fulfilled their expectation
4.in agile methodology the daily is paid to the good design of the product
5. changes in the reqirements are accepted even in hte later stages of the development.
6. in agile methodology the daily interacctions are required between the business people and the developers

disadvantages of agile model

1. it is not useful for small developments projects
2. there is a lack of intensity on necessary designing and documentation
3.it requires an experts project members to take crucial decisions in the meeting
4.cost of agile development methodolgy is slighty more as compared to other development methodology
5.thhe project can quickly go out off track if the project manager is not clear about requirements and whatoutcomes he/she wants


srum:
1. srum is a framework that helps teams work together . 


definition of DONE :
it has been defined three stages
1. user story
2. iteration
3. product  release

User story:



why to split user story into task
1. allows the teams to determine what is essential now


scrum task board
1.used to keep the track and subtasks
2.

sprint velocity:
*the number of story points completed by a team in one sprint
*dividing the total story points completed by the team by the number of sprintsv     

                                                                                 stakeholder 
                                                                              /                     \
                                        innternal stakeholder                          external stakeholder
                                       project manager                                     customer
		                       project team                                           goverment
		                       company                                                  supplier
		                       funder 


extreme programming (XP) :
1. a way to handle the common shortcomings 
2. Xp is a light weight efficient low risk flexible, predictable scientific , and fun way to develop a software

Extreme Programming is based on the following values :
1.Communication
2.Simplicity
3.Feedback
4.Courage
5.Respect

Embrace Change
A key assumption of Extreme Programming is that the cost of changing a program can be held mostly constant over time.
This can be achieved with −
1.Emphasis on continuous feedback from the customer
2.Short iterations
3.Design and redesign
3.Coding and testing frequently
4eliminating defects early, thus reducing costs
5.Keeping the customer involved throughout the development
6.Delivering working product to the customer

features:
1.Code reviews are effective as the code is reviewed all the time.
2.Testing is effective as there is continuous regression and testing.
3.Design is effective as everybody needs to do refactoring daily.
4.integration testing is important as integrate and test several times a day.
5.Short iterations are effective as the planning game for release planning and iteration planning.

Extreme Programming Advantages
Extreme Programming solves the following problems often faced in the software development projects −
1.Slipped schedules − and achievable development cycles ensure timely deliveries.
2.Cancelled projects − Focus on continuous customer involvement ensures transparency with the customer and immediate resolution of any issues.
3.Costs incurred in changes − Extensive and ongoing testing makes sure the changes do not break the existing functionality. A running working system always ensures sufficient time for accommodating changes such that the current operations are not affected.
4.Production and post-delivery defects: Emphasis is on − the unit tests to detect and fix the defects early.
5.Misunderstanding the business and/or domain − Making the customer a part of the team ensures constant communication and clarifications.
6.Business changes − Changes are considered to be inevitable and are accommodated at any point of time.
7.Staff turnover − Intensive team collaboration ensures enthusiasm and good will. Cohesion of multi-disciplines fosters the team spirit.

There are four basic activities in Extreme Programming. They are −

Coding
Testing
Listening
Designing

These four basic activities need to be structured in the light of the Extreme Programming principles. To accomplish this, the Extreme Programming practices are defined.

These 12 Extreme Programming practices achieve the Extreme Programming objective and wherever one of the practices is weak, the strengths of the other practices will make up for it.

Kent Beck, the author of ‘Extreme Programming Explained’ defined 12 Extreme Programming practices as follows −

1.The Planning Game
2.Short Releases
3.Metaphor
4.Simple Design
5.Testing
6.Refactoring
7.Pair Programming
8.Collective Ownership
9.Continuous Integration
10.40 hour Week
11.On-site Customer
12.Coding Standards

Four Areas of Extreme Programming
The Extreme Programming practices can be grouped into four areas −

Rapid, Fine Feedback −

             Testing
             On-site customer
             Pair programming

Continuous Process −

	    Continuous Integration
	    Refactoring
	    Short Releases

Shared Understanding −

	    The Planning Game
	    Simple Design
	    Metaphor
	    Collective Ownership
	    Coding Standards

Developer Welfare −

	    Forty-Hour Week


Short Releases
You should put a simple system into production quickly, and then release new versions in very short cycles. Every release should be as small as possible, so that it is −
1.Achievable in a short cycle
2.Contains the most valuable and immediate business requirements
3.A working system
The duration of the short cycle may vary with the software that needs to be built. However, it needs to be ensured that the minimum possible duration is chosen.

metaphor:
1.The metaphor consists of domain specific elements and shows their interconnectivity.
2.The language used is the domain language.
3.To identify the technical entities, the words used in the metaphor need to be taken consistently.
4.As the development proceeds and the metaphor matures, the whole team will find new inspiration from examining the metaphor.


Pair Programming
In Pair programing, the entire code is written with two developers at one machine, with one keyboard and one mouse.

There are two roles in each pair −
1.The first developer (the one with the keyboard and the mouse) thinks about the best way to implement this method right here.
2.The other developer is thinks more strategically
3.Is this whole approach going to work?
4.What are some other test cases that might not work yet?
5.Is there some way to simplify the whole system so the current problem just disappears?
                          















